{
  "openapi": "3.1.0",
  "info": {
    "title": "NutriLog API",
    "version": "1.0.1",
    "description": "API for managing calorie logs in the NutriLog web application."
  },
  "servers": [
    {
      "url": "https://svelters.dev.wiredgeese.com"
    }
  ],
  "paths": {
    "/app/api/calorie/log/draft/save": {
      "post": {
        "summary": "Save a draft of a calorie log.",
        "description": "This endpoint allows users to save a draft of their calorie log for a specific date, including a list of consumed items.",
        "operationId": "saveCalorieLogDraft",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string",
                    "format": "date",
                    "description": "The date of the calorie log in YYYY-MM-DD format."
                  },
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CalorieLogItem"
                    },
                    "description": "List of calorie log items."
                  }
                },
                "required": ["date", "items"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Calorie log draft saved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalorieLogSaveResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Missing or invalid data."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/app/api/profile/get": {
      "get": {
        "summary": "Get user profile information.",
        "description": "This endpoint allows users to retrieve their profile information, including metadata and profile details.",
        "operationId": "Profile_Get",
        "responses": {
          "200": {
            "description": "User profile retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileGetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Missing or invalid data."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/app/api/profile/update": {
      "post": {
        "summary": "Update user profile information.",
        "description": "This endpoint updates the user's profile with the provided data.",
        "operationId": "Profile_Update",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "profile": {
                    "$ref": "#/components/schemas/Svelters_Shared_Dto_User_Profile"
                  }
                },
                "required": ["profile"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/Svelters_Shared_Dto_Web_Api_Response_Meta"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or missing required fields."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CalorieLogItem": {
        "type": "object",
        "properties": {
          "food": {
            "type": "string",
            "description": "The name of the consumed product. Example: 'Apple', 'Rice', 'Chicken Breast'."
          },
          "quantity": {
            "type": "number",
            "format": "float",
            "description": "The amount of the product consumed. The unit is defined separately in the 'measure' field. Example: 150 (grams), 1 (piece), 250 (milliliters)."
          },
          "measure": {
            "type": "string",
            "description": "The measurement unit for the consumed product. The values must be one of the predefined, non-translated options: 'GRAMS', 'MILLILITERS', 'PIECES'. These values should remain consistent and are not to be translated into other languages.",
            "enum": ["GRAMS", "MILLILITERS", "PIECES"]
          },
          "unitCalories": {
            "type": "number",
            "format": "float",
            "description": "The caloric value of the product per standard unit. Expressed in kilocalories per 100 grams/milliliters or per piece. Example: 52 (kcal per 100g for an apple), 365 (kcal per 100g for rice)."
          },
          "totalCalories": {
            "type": "number",
            "format": "float",
            "description": "The total caloric value of the consumed product. This value is calculated based on the quantity and measure.\n- If 'measure' is 'PIECES', it is calculated as 'quantity * unitCalories'.\n- If 'measure' is 'GRAMS' or 'MILLILITERS', it is calculated as 'quantity / 100 * unitCalories'.\n\nThis attribute is **mandatory** and serves as a control value to verify the correctness of the other attributes (`quantity`, `measure`, `unitCalories`). It must be calculated both by the sender and the receiver. The correct value of `totalCalories` allows for the validation of the provided data and ensures that the `quantity`, `measure`, and `unitCalories` values are logically consistent."
          }
        },
        "required": ["food", "quantity", "measure", "unitCalories", "totalCalories"],
        "description": "Represents a single food item in a daily calorie log. It contains the details about the consumed product including its name, quantity, measurement unit, caloric value per unit, and the total caloric value of the consumed product."
      },
      "CalorieLogSaveResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates whether the draft was successfully saved."
          },
          "message": {
            "type": "string",
            "description": "Message providing additional information about the save operation."
          }
        },
        "required": ["success", "message"]
      },
      "ProfileGetResponse": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Svelters_Shared_Dto_Web_Api_Response_Meta"
          },
          "profile": {
            "$ref": "#/components/schemas/Svelters_Shared_Dto_User_Profile"
          }
        },
        "required": ["meta", "profile"],
        "description": "Response structure for retrieving the user profile, including meta data and profile information."
      },
      "Svelters_Shared_Dto_Web_Api_Response_Meta": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The result code depends on the endpoint."
          },
          "message": {
            "type": "string",
            "description": "Optional message explaining the result code, if necessary."
          },
          "ok": {
            "type": "boolean",
            "description": "`true` means the application processed the message normally and without errors."
          }
        },
        "required": ["code", "ok"],
        "description": "Standard meta information for the API response, explaining the processing result."
      },
      "Svelters_Shared_Dto_User_Profile": {
        "type": "object",
        "properties": {
          "dateBirth": {
            "type": "string",
            "format": "date",
            "description": "User's date of birth in YYYY-MM-DD format."
          },
          "dateCreated": {
            "type": "string",
            "format": "date-time",
            "description": "Date-time when the user registered."
          },
          "dateUpdated": {
            "type": "string",
            "format": "date-time",
            "description": "Date-time of the last profile update."
          },
          "goal": {
            "type": "string",
            "description": "User's current goal (e.g., weight loss target)."
          },
          "height": {
            "type": "number",
            "description": "User's height in cm."
          },
          "locale": {
            "type": "string",
            "description": "User's language preference locale (e.g., 'en', 'fr')."
          },
          "name": {
            "type": "string",
            "description": "User's name as displayed in the profile."
          },
          "timezone": {
            "type": "string",
            "description": "User's timezone, formatted as IANA identifier (e.g., 'Europe/Riga')."
          },
          "uuid": {
            "type": "string",
            "description": "Universally unique identifier as public ID."
          },
          "weight": {
            "type": "number",
            "description": "User's weight in grams."
          }
        },
        "required": ["dateBirth", "dateCreated", "goal", "height", "locale", "name", "timezone", "uuid", "weight"],
        "description": "User profile details including personal and physical information."
      }
    }
  }
}
